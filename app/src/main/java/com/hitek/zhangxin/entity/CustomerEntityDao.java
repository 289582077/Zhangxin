package com.hitek.zhangxin.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMER_ENTITY".
*/
public class CustomerEntityDao extends AbstractDao<CustomerEntity, Long> {

    public static final String TABLENAME = "CUSTOMER_ENTITY";

    /**
     * Properties of entity CustomerEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Phone = new Property(0, Long.class, "phone", true, "_id");
        public final static Property Balance = new Property(1, double.class, "balance", false, "BALANCE");
        public final static Property Points = new Property(2, int.class, "points", false, "POINTS");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property OldMoney = new Property(4, double.class, "oldMoney", false, "OLD_MONEY");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Coupon = new Property(6, double.class, "coupon", false, "COUPON");
    }


    public CustomerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: phone
                "\"BALANCE\" REAL NOT NULL ," + // 1: balance
                "\"POINTS\" INTEGER NOT NULL ," + // 2: points
                "\"DATE\" TEXT," + // 3: date
                "\"OLD_MONEY\" REAL NOT NULL ," + // 4: oldMoney
                "\"NAME\" TEXT," + // 5: name
                "\"COUPON\" REAL NOT NULL );"); // 6: coupon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CustomerEntity entity) {
        stmt.clearBindings();
 
        Long phone = entity.getPhone();
        if (phone != null) {
            stmt.bindLong(1, phone);
        }
        stmt.bindDouble(2, entity.getBalance());
        stmt.bindLong(3, entity.getPoints());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
        stmt.bindDouble(5, entity.getOldMoney());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindDouble(7, entity.getCoupon());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CustomerEntity entity) {
        stmt.clearBindings();
 
        Long phone = entity.getPhone();
        if (phone != null) {
            stmt.bindLong(1, phone);
        }
        stmt.bindDouble(2, entity.getBalance());
        stmt.bindLong(3, entity.getPoints());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
        stmt.bindDouble(5, entity.getOldMoney());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindDouble(7, entity.getCoupon());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CustomerEntity readEntity(Cursor cursor, int offset) {
        CustomerEntity entity = new CustomerEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // phone
            cursor.getDouble(offset + 1), // balance
            cursor.getInt(offset + 2), // points
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.getDouble(offset + 4), // oldMoney
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.getDouble(offset + 6) // coupon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CustomerEntity entity, int offset) {
        entity.setPhone(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBalance(cursor.getDouble(offset + 1));
        entity.setPoints(cursor.getInt(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOldMoney(cursor.getDouble(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCoupon(cursor.getDouble(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CustomerEntity entity, long rowId) {
        entity.setPhone(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CustomerEntity entity) {
        if(entity != null) {
            return entity.getPhone();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CustomerEntity entity) {
        return entity.getPhone() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
